// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Practice.proto

#include "ProtoBuf/Practice.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Practice {
constexpr ParkingSpot::ParkingSpot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spotnum_(0){}
struct ParkingSpotDefaultTypeInternal {
  constexpr ParkingSpotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParkingSpotDefaultTypeInternal() {}
  union {
    ParkingSpot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParkingSpotDefaultTypeInternal _ParkingSpot_default_instance_;
constexpr ParkingLot::ParkingLot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spots_(){}
struct ParkingLotDefaultTypeInternal {
  constexpr ParkingLotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParkingLotDefaultTypeInternal() {}
  union {
    ParkingLot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParkingLotDefaultTypeInternal _ParkingLot_default_instance_;
}  // namespace Practice
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Practice_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Practice_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Practice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Practice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Practice::ParkingSpot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Practice::ParkingSpot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Practice::ParkingSpot, spotnum_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Practice::ParkingLot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Practice::ParkingLot, spots_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::Practice::ParkingSpot)},
  { 7, -1, sizeof(::Practice::ParkingLot)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Practice::_ParkingSpot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Practice::_ParkingLot_default_instance_),
};

const char descriptor_table_protodef_Practice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Practice.proto\022\010Practice\"_\n\013ParkingSpo"
  "t\022\017\n\007SpotNum\030\001 \002(\005\"\?\n\013VehicleType\022\007\n\003CAR"
  "\020\000\022\007\n\003VAN\020\001\022\t\n\005TRUCK\020\002\022\010\n\004MOTO\020\003\022\t\n\005EMPT"
  "Y\020\004\"2\n\nParkingLot\022$\n\005spots\030\001 \003(\0132\025.Pract"
  "ice.ParkingSpot"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Practice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Practice_2eproto = {
  false, false, 175, descriptor_table_protodef_Practice_2eproto, "Practice.proto", 
  &descriptor_table_Practice_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_Practice_2eproto::offsets,
  file_level_metadata_Practice_2eproto, file_level_enum_descriptors_Practice_2eproto, file_level_service_descriptors_Practice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_Practice_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Practice_2eproto);
  return descriptor_table_Practice_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Practice_2eproto(&descriptor_table_Practice_2eproto);
namespace Practice {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParkingSpot_VehicleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Practice_2eproto);
  return file_level_enum_descriptors_Practice_2eproto[0];
}
bool ParkingSpot_VehicleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ParkingSpot_VehicleType ParkingSpot::CAR;
constexpr ParkingSpot_VehicleType ParkingSpot::VAN;
constexpr ParkingSpot_VehicleType ParkingSpot::TRUCK;
constexpr ParkingSpot_VehicleType ParkingSpot::MOTO;
constexpr ParkingSpot_VehicleType ParkingSpot::EMPTY;
constexpr ParkingSpot_VehicleType ParkingSpot::VehicleType_MIN;
constexpr ParkingSpot_VehicleType ParkingSpot::VehicleType_MAX;
constexpr int ParkingSpot::VehicleType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ParkingSpot::_Internal {
 public:
  using HasBits = decltype(std::declval<ParkingSpot>()._has_bits_);
  static void set_has_spotnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ParkingSpot::ParkingSpot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Practice.ParkingSpot)
}
ParkingSpot::ParkingSpot(const ParkingSpot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  spotnum_ = from.spotnum_;
  // @@protoc_insertion_point(copy_constructor:Practice.ParkingSpot)
}

void ParkingSpot::SharedCtor() {
spotnum_ = 0;
}

ParkingSpot::~ParkingSpot() {
  // @@protoc_insertion_point(destructor:Practice.ParkingSpot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParkingSpot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ParkingSpot::ArenaDtor(void* object) {
  ParkingSpot* _this = reinterpret_cast< ParkingSpot* >(object);
  (void)_this;
}
void ParkingSpot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParkingSpot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParkingSpot::Clear() {
// @@protoc_insertion_point(message_clear_start:Practice.ParkingSpot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spotnum_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParkingSpot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 SpotNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_spotnum(&has_bits);
          spotnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParkingSpot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Practice.ParkingSpot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 SpotNum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_spotnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Practice.ParkingSpot)
  return target;
}

size_t ParkingSpot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Practice.ParkingSpot)
  size_t total_size = 0;

  // required int32 SpotNum = 1;
  if (_internal_has_spotnum()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spotnum());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParkingSpot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Practice.ParkingSpot)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingSpot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParkingSpot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Practice.ParkingSpot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Practice.ParkingSpot)
    MergeFrom(*source);
  }
}

void ParkingSpot::MergeFrom(const ParkingSpot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Practice.ParkingSpot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spotnum()) {
    _internal_set_spotnum(from._internal_spotnum());
  }
}

void ParkingSpot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Practice.ParkingSpot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingSpot::CopyFrom(const ParkingSpot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Practice.ParkingSpot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingSpot::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ParkingSpot::InternalSwap(ParkingSpot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(spotnum_, other->spotnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParkingSpot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ParkingLot::_Internal {
 public:
};

ParkingLot::ParkingLot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  spots_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Practice.ParkingLot)
}
ParkingLot::ParkingLot(const ParkingLot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      spots_(from.spots_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Practice.ParkingLot)
}

void ParkingLot::SharedCtor() {
}

ParkingLot::~ParkingLot() {
  // @@protoc_insertion_point(destructor:Practice.ParkingLot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParkingLot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ParkingLot::ArenaDtor(void* object) {
  ParkingLot* _this = reinterpret_cast< ParkingLot* >(object);
  (void)_this;
}
void ParkingLot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParkingLot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParkingLot::Clear() {
// @@protoc_insertion_point(message_clear_start:Practice.ParkingLot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spots_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParkingLot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Practice.ParkingSpot spots = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParkingLot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Practice.ParkingLot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Practice.ParkingSpot spots = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_spots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_spots(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Practice.ParkingLot)
  return target;
}

size_t ParkingLot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Practice.ParkingLot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Practice.ParkingSpot spots = 1;
  total_size += 1UL * this->_internal_spots_size();
  for (const auto& msg : this->spots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParkingLot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Practice.ParkingLot)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingLot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParkingLot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Practice.ParkingLot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Practice.ParkingLot)
    MergeFrom(*source);
  }
}

void ParkingLot::MergeFrom(const ParkingLot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Practice.ParkingLot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spots_.MergeFrom(from.spots_);
}

void ParkingLot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Practice.ParkingLot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingLot::CopyFrom(const ParkingLot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Practice.ParkingLot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingLot::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(spots_)) return false;
  return true;
}

void ParkingLot::InternalSwap(ParkingLot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  spots_.InternalSwap(&other->spots_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParkingLot::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Practice
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Practice::ParkingSpot* Arena::CreateMaybeMessage< ::Practice::ParkingSpot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Practice::ParkingSpot >(arena);
}
template<> PROTOBUF_NOINLINE ::Practice::ParkingLot* Arena::CreateMaybeMessage< ::Practice::ParkingLot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Practice::ParkingLot >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
