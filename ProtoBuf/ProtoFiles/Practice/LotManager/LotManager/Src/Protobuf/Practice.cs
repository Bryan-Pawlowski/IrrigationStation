// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Practice.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Practice {

  /// <summary>Holder for reflection information generated from Practice.proto</summary>
  public static partial class PracticeReflection {

    #region Descriptor
    /// <summary>File descriptor for Practice.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PracticeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5QcmFjdGljZS5wcm90bxIIUHJhY3RpY2UikAEKC1BhcmtpbmdTcG90Eg8K",
            "B1Nwb3ROdW0YASABKAUSLwoEVHlwZRgCIAEoDjIhLlByYWN0aWNlLlBhcmtp",
            "bmdTcG90LlZlaGljbGVUeXBlIj8KC1ZlaGljbGVUeXBlEgcKA0NBUhAAEgcK",
            "A1ZBThABEgkKBVRSVUNLEAISCAoETU9UTxADEgkKBUVNUFRZEAQiQAoKUGFy",
            "a2luZ0xvdBIkCgVzcG90cxgBIAMoCzIVLlByYWN0aWNlLlBhcmtpbmdTcG90",
            "EgwKBFNpemUYAiABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Practice.ParkingSpot), global::Practice.ParkingSpot.Parser, new[]{ "SpotNum", "Type" }, null, new[]{ typeof(global::Practice.ParkingSpot.Types.VehicleType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Practice.ParkingLot), global::Practice.ParkingLot.Parser, new[]{ "Spots", "Size" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ParkingSpot : pb::IMessage<ParkingSpot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ParkingSpot> _parser = new pb::MessageParser<ParkingSpot>(() => new ParkingSpot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParkingSpot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Practice.PracticeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParkingSpot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParkingSpot(ParkingSpot other) : this() {
      spotNum_ = other.spotNum_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParkingSpot Clone() {
      return new ParkingSpot(this);
    }

    /// <summary>Field number for the "SpotNum" field.</summary>
    public const int SpotNumFieldNumber = 1;
    private int spotNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpotNum {
      get { return spotNum_; }
      set {
        spotNum_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Practice.ParkingSpot.Types.VehicleType type_ = global::Practice.ParkingSpot.Types.VehicleType.Car;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Practice.ParkingSpot.Types.VehicleType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParkingSpot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParkingSpot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpotNum != other.SpotNum) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpotNum != 0) hash ^= SpotNum.GetHashCode();
      if (Type != global::Practice.ParkingSpot.Types.VehicleType.Car) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SpotNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpotNum);
      }
      if (Type != global::Practice.ParkingSpot.Types.VehicleType.Car) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SpotNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpotNum);
      }
      if (Type != global::Practice.ParkingSpot.Types.VehicleType.Car) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpotNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpotNum);
      }
      if (Type != global::Practice.ParkingSpot.Types.VehicleType.Car) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParkingSpot other) {
      if (other == null) {
        return;
      }
      if (other.SpotNum != 0) {
        SpotNum = other.SpotNum;
      }
      if (other.Type != global::Practice.ParkingSpot.Types.VehicleType.Car) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpotNum = input.ReadInt32();
            break;
          }
          case 16: {
            Type = (global::Practice.ParkingSpot.Types.VehicleType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SpotNum = input.ReadInt32();
            break;
          }
          case 16: {
            Type = (global::Practice.ParkingSpot.Types.VehicleType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ParkingSpot message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum VehicleType {
        [pbr::OriginalName("CAR")] Car = 0,
        [pbr::OriginalName("VAN")] Van = 1,
        [pbr::OriginalName("TRUCK")] Truck = 2,
        [pbr::OriginalName("MOTO")] Moto = 3,
        [pbr::OriginalName("EMPTY")] Empty = 4,
      }

    }
    #endregion

  }

  public sealed partial class ParkingLot : pb::IMessage<ParkingLot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ParkingLot> _parser = new pb::MessageParser<ParkingLot>(() => new ParkingLot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParkingLot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Practice.PracticeReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParkingLot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParkingLot(ParkingLot other) : this() {
      spots_ = other.spots_.Clone();
      size_ = other.size_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParkingLot Clone() {
      return new ParkingLot(this);
    }

    /// <summary>Field number for the "spots" field.</summary>
    public const int SpotsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Practice.ParkingSpot> _repeated_spots_codec
        = pb::FieldCodec.ForMessage(10, global::Practice.ParkingSpot.Parser);
    private readonly pbc::RepeatedField<global::Practice.ParkingSpot> spots_ = new pbc::RepeatedField<global::Practice.ParkingSpot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Practice.ParkingSpot> Spots {
      get { return spots_; }
    }

    /// <summary>Field number for the "Size" field.</summary>
    public const int SizeFieldNumber = 2;
    private int size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParkingLot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParkingLot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!spots_.Equals(other.spots_)) return false;
      if (Size != other.Size) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= spots_.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      spots_.WriteTo(output, _repeated_spots_codec);
      if (Size != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Size);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      spots_.WriteTo(ref output, _repeated_spots_codec);
      if (Size != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Size);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += spots_.CalculateSize(_repeated_spots_codec);
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParkingLot other) {
      if (other == null) {
        return;
      }
      spots_.Add(other.spots_);
      if (other.Size != 0) {
        Size = other.Size;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            spots_.AddEntriesFrom(input, _repeated_spots_codec);
            break;
          }
          case 16: {
            Size = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            spots_.AddEntriesFrom(ref input, _repeated_spots_codec);
            break;
          }
          case 16: {
            Size = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
